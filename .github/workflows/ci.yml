name: 'CI'

on:
  push:
    branches: ['**']
    tags: ['**']

jobs:
  lint:
    name: 'Lint'
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'actions/setup-python@v4'
        with:
          python-version: '3.11'
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade --user pip flake8
          echo "Installing project requirements"
          pip install -r requirements.txt
      - name: 'Flake8 :allthethings:'
        run: 'python -m flake8 --max-line-length 120'
  test:
    name: 'Test'
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'actions/setup-python@v4'
        with:
          python-version: '3.10'
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade --user pip pytest coverage pyfakefs
          echo "Installing project requirements"
          pip install -r requirements.txt
      - name: 'Run tests'
        run: 'python -m coverage run --branch -m pytest'
      - name: 'Display coverage report'
        run: |
          python -m coverage report --fail-under=80 \
          --omit="*/.local/*","*/tests/test_*" -m
  container_build:
    name: 'Build and Push Docker Container'
    runs-on: 'ubuntu-20.04'
    needs: ['lint', 'test']
    steps:
      - uses: 'actions/checkout@v3'
      - name: 'Get calculated next version based on commit history'
        id: 'calculated-next-version'
        uses: 'mathieudutour/github-tag-action@v6.1'
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          release_branches: 'main'
          default_bump: 'patch'
          dry_run: 'true'
          append_to_pre_release_tag: 'rc-${{ github.run_id }}'
          pre_release_branches: '^((main(?!$)).+|(?!main).+)$'
      - name: 'Prepare'
        id: 'prep'
        run: |
          DOCKER_IMAGE=${{ github.repository }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
            if [[ $VERSION == main ]]; then
              VERSION=latest
            else
              VERSION=${{ steps.calculated-next-version.outputs.new_tag }}
            fi
          fi
          PUSH=true
          if [[ $GITHUB_REF == refs/heads/dependabot* ]]; then
            echo "Dependabot branch"
            PUSH=false
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION//\//-}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION//\//-}" >> $GITHUB_OUTPUT
          echo "push=${PUSH}" >> $GITHUB_OUTPUT
      - name: 'Setup Docker Buildx'
        uses: 'docker/setup-buildx-action@v2'
      - name: 'Cache Docker layers'
        uses: 'actions/cache@v3.3.1'
        with:
          path: '/tmp/.buildx-cache'
          key: '${{ runner.os }}-buildx-${{ steps.prep.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-buildx-${{ steps.prep.outputs.version }}
      - name: 'Login to DockerHub'
        uses: 'docker/login-action@v2'
        with:
          username: 'chrisjohnson00'
          password: '${{ secrets.DOCKER_HUB_PASSWORD }}'
      - name: 'Build and push'
        id: 'docker_build'
        uses: 'docker/build-push-action@v4'
        with:
          context: '.'
          file: './Dockerfile'
          # ensure latest base image is used
          pull: 'true'
          # publish
          push: '${{ steps.prep.outputs.push }}'
          # tags determined by prep step
          tags: '${{ steps.prep.outputs.tags }}'
          cache-from: 'type=local,src=/tmp/.buildx-cache'
          cache-to: 'type=local,dest=/tmp/.buildx-cache'
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
  faas:
    name: 'Build and Push OpenFaas Functions'
    runs-on: ubuntu-20.04
    needs: ['lint', 'test']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install faas-cli
        run: |
          curl -sSL https://cli.openfaas.com | sh
      - name: Function Build
        run: |
          faas-cli build -f open-faas.yml --parallel 2 --tag=describe
      - name: 'Login to DockerHub'
        uses: 'docker/login-action@v2'
        with:
          username: 'chrisjohnson00'
          password: '${{ secrets.DOCKER_HUB_PASSWORD }}'
      - name: Function Push
        run: |
          faas-cli push -f open-faas.yml --parallel 2 --tag=describe
  faas-deploy:
    name: 'Deploy OpenFaas Functions'
    runs-on: openfaas
    needs: ['faas']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install faas-cli
        run: |
          curl -sSL https://cli.openfaas.com | sh
      - name: Function Deploy
        run: |
          ./faas-cli template pull
          echo $GATEWAY_PASSWORD | ./faas-cli login -s --gateway http://gateway.openfaas:8080
          ./faas-cli deploy -f open-faas.yml --tag=describe --gateway http://gateway.openfaas:8080
  actionslint:
    name: 'Actions Yaml Lint'
    runs-on: 'ubuntu-20.04'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v3'
      - name: 'Actions Yaml Lint'
        uses: 'karancode/yamllint-github-action@v2.1.1'
        with:
          yamllint_file_or_dir: '.github/workflows'
          yamllint_comment: 'true'
          yamllint_config_datapath: '{"extends":"default","rules":{"line-length":{"max":360,"level":"warning"},"truthy":{"check-keys":false},"document-start":{"present":false}}}'
        env:
          GITHUB_ACCESS_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  azure-deploy:
    name: 'Deploy To Azure'
    runs-on: ubuntu-20.04
    container:
      image: chrisjohnson00/pulumi-python:latest
    needs: ['lint', 'test']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Pulumi Up
        run: |
          source /usr/src/app/venv/bin/activate
          echo "VIRTUAL ENV:" $VIRTUAL_ENV
          pulumi up -y --stack ${{ github.repository }}/az-functions
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
